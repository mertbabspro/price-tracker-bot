import time
import json
import requests
import logging
import re
import os
from bs4 import BeautifulSoup

# Log ayarları - sadece hatalar için
logging.basicConfig(level=logging.ERROR, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def konfigurasyonu_yukle():
    """JSON dosyasından veya environment variables'dan konfigürasyonu yükle"""
    try:
        # Railway environment variables'ı kontrol et
        env_chat_id = os.getenv('TELEGRAM_CHAT_ID')
        env_bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        env_site_url = os.getenv('TARGET_URL')
        
        if env_chat_id and env_bot_token and env_site_url:
            return env_chat_id, env_bot_token, env_site_url
        
        # Hardcoded değerler (Railway variables yoksa)
        return "6805362332", "8006318166:AAF0GcJfrTDfqAip-I3kavgv9kvtNgLOh5s", "https://www.hepsiburada.com/madame-coco-benard-6-kisilik-12-parca-kahve-fincan-seti-beyaz-110-ml-p-HBCV000079PQO1"
        
    except Exception as e:
        return None, None, None

def mesaj_gonder(bot_token, chat_id, mesaj):
    """Telegram'a mesaj gönder"""
    try:
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {"chat_id": chat_id, "text": mesaj}
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            return True
        else:
            return False
    except requests.exceptions.RequestException as e:
        return False

def fiyat_al_requests(site_url, fiyat_class_name="bWwoI8vknB6COlRVbpRj"):
    """Requests ile fiyat al (Selenium yerine)"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'tr-TR,tr;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }
        
        response = requests.get(site_url, headers=headers, timeout=30)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # Class name ile fiyat elementi bul
        fiyat_element = soup.find(class_=fiyat_class_name)
        
        if fiyat_element:
            fiyat = fiyat_element.get_text().strip()
            return fiyat
        else:
            # Alternatif fiyat arama stratejileri
            # Yaygın fiyat pattern'leri
            fiyat_patterns = [
                r'(\d{1,3}(?:[.,]\d{3})*[.,]\d{2})\s*(?:TL|₺|Lira)',
                r'(\d{1,3}(?:[.,]\d{3})*)\s*(?:TL|₺|Lira)',
                r'₺\s*(\d{1,3}(?:[.,]\d{3})*[.,]\d{2})',
                r'(\d{1,3}(?:[.,]\d{3})*[.,]\d{2})',
            ]
            
            for pattern in fiyat_patterns:
                match = re.search(pattern, response.text)
                if match:
                    return match.group(1)
            
            return None
            
    except Exception as e:
        return None

def fiyat_temizle(fiyat_text):
    """Fiyat metnini sayıya çevir"""
    if not fiyat_text:
        return None
    
    # Sadece sayıları ve virgülü al
    temiz_fiyat = re.sub(r'[^\d,.]', '', fiyat_text)
    temiz_fiyat = temiz_fiyat.replace(',', '.')
    
    try:
        return float(temiz_fiyat)
    except ValueError:
        return None

def onceki_fiyati_kaydet(fiyat):
    """Fiyatı dosyaya kaydet"""
    try:
        with open("onceki_fiyat.json", "w", encoding="utf-8") as f:
            json.dump({"fiyat": fiyat, "tarih": time.time()}, f)
    except Exception as e:
        pass

def onceki_fiyati_oku():
    """Önceki fiyatı dosyadan oku"""
    try:
        if os.path.exists("onceki_fiyat.json"):
            with open("onceki_fiyat.json", "r", encoding="utf-8") as f:
                data = json.load(f)
                return data.get("fiyat")
        return None
    except Exception as e:
        return None

def fiyat_karsilastir(yeni_fiyat, onceki_fiyat):
    """Fiyatları karşılaştır ve durum mesajı oluştur"""
    if onceki_fiyat is None:
        return "🆕 İlk fiyat kaydı: {:.2f} TL".format(yeni_fiyat), "bilgi"
    
    fark = yeni_fiyat - onceki_fiyat
    yuzde_fark = (fark / onceki_fiyat) * 100
    
    if fark < -0.01:  # Fiyat düştü
        return f"📉 FİYAT DÜŞTÜ!\n💰 Önceki: {onceki_fiyat:.2f} TL\n🔥 Şimdi: {yeni_fiyat:.2f} TL\n💸 İndirim: {abs(fark):.2f} TL (%{abs(yuzde_fark):.1f})", "dusus"
    elif fark > 0.01:  # Fiyat yükseldi
        return f"📈 Fiyat yükseldi\n💰 Önceki: {onceki_fiyat:.2f} TL\n📊 Şimdi: {yeni_fiyat:.2f} TL\n⬆️ Artış: {fark:.2f} TL (%{yuzde_fark:.1f})", "yukseli"
    else:  # Fiyat aynı
        return f"💰 Fiyat değişmedi: {yeni_fiyat:.2f} TL", "ayni"

def main():
    """Ana fonksiyon"""
    # Konfigürasyonu yükle
    chat_id, bot_token, site_url = konfigurasyonu_yukle()
    
    if not all([chat_id, bot_token, site_url]):
        return
    
    try:
        # Fiyatı al (Requests ile)
        fiyat = fiyat_al_requests(site_url)
        
        if fiyat:
            # Fiyatı sayıya çevir
            yeni_fiyat_sayi = fiyat_temizle(fiyat)
            
            if yeni_fiyat_sayi:
                # Önceki fiyatı oku
                onceki_fiyat = onceki_fiyati_oku()
                
                # Fiyatları karşılaştır
                durum_mesaji, durum_tipi = fiyat_karsilastir(yeni_fiyat_sayi, onceki_fiyat)
                
                # Mesaj gönder
                mesaj_gonder(bot_token, chat_id, durum_mesaji)
                
                # Yeni fiyatı kaydet
                onceki_fiyati_kaydet(yeni_fiyat_sayi)
            else:
                hata_mesaji = "❌ Fiyat formatı anlaşılamadı."
                mesaj_gonder(bot_token, chat_id, hata_mesaji)
        else:
            hata_mesaji = "❌ Fiyat alınamadı. Site yapısı değişmiş olabilir."
            mesaj_gonder(bot_token, chat_id, hata_mesaji)
            
    except Exception as e:
        hata_mesaji = f"❌ Program hatası: {str(e)}"
        mesaj_gonder(bot_token, chat_id, hata_mesaji)

if __name__ == "__main__":
    # Railway için sürekli çalışım
    if os.getenv('RAILWAY_ENVIRONMENT'):
        while True:
            main()
            time.sleep(300)  # 5 dakika bekle
    else:
        # Local için tek seferlik
        main()